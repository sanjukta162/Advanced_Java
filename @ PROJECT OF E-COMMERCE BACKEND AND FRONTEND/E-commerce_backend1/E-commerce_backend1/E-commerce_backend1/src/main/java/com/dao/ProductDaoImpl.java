package com.dao;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.model.Product;


@Repository(value= "productdao")
public class ProductDaoImpl implements ProductDao{
	
	@Autowired
	private  SessionFactory sessionFactory;
	public ProductDaoImpl(SessionFactory sessionFactory){
		this.sessionFactory = sessionFactory;
	}
	
	@Transactional
	public boolean save(Product product) {
		try
       {
    sessionFactory.getCurrentSession().save(product);
       return true;
       } catch(HibernateException e)
		{
          e.printStackTrace();
       return false;
       }
    }
	
	
	@Transactional
	public boolean update(Product product) {
		try {

			sessionFactory.getCurrentSession().update(product);

			return
			true;

			} catch (Exception e) {

			e.printStackTrace();

			return false;
           }
		
	}
	
	@Transactional
	public List<Product> list() {
		return sessionFactory.getCurrentSession().createQuery("from Product").list();
		}
	
		
	
	
	@Transactional
	public boolean delete(int id) {
		try {

			sessionFactory.getCurrentSession().delete(getProductBYID(id));

			return
			true;

			} catch (Exception e) {


			e.printStackTrace();

			return false;

			}
}
	
	@Transactional
	public boolean delete(Product product) {
		try {

			sessionFactory.getCurrentSession().delete(product);

			return
			true;

			} catch (Exception e) {

			e.printStackTrace();

			return false;
        }
	}
	
	@Transactional
	public Product getProductBYID(int id) {
		return (Product) sessionFactory.getCurrentSession().get(Product.class,id);
	}
	
	@Transactional
	public Product getProductBYNAME(String name) {
		return (Product)sessionFactory.getCurrentSession().createQuery("from Product where name ='"+name+"'").uniqueResult();
	}
	
	@Transactional
	public Product get(String id) {
		String hql ="from Product where id ="+"'"+id+"'";
    	Query query =sessionFactory.getCurrentSession().createQuery(hql);
    	List<Product>list =query.list();
    	if(list == null){
    		return null;
    	}
    	else{
    		return list.get(0);
    	}
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*@Autowired
	private SessionFactory sessionFactory;
	public  ProductDaoImpl(){
		System.out.println("ProductDaoImpl 	object is created");
	}



@Transactional
public void saveProduct(Product product) {
	
	Session session=sessionFactory.getCurrentSession();
	
	//insert into product values (autogeneratedvalue,"Titian Raga",3000,20,"Titan Raga Mother of Pearl Dial Analog Watch for Women")
	
	session.save(product);
	 }


@Transactional
    public List<Product> getAllProducts(){
    	Session session=sessionFactory.getCurrentSession();
    	Query query=session.createQuery("from Product");
    	List<Product>products=query.list();
    	return products;
}



@Transactional
      public Product getProductById (int id) {
	Session session=sessionFactory.getCurrentSession();
	Product product =(Product)session.get(Product.class, id);
	return product;
}
@Transactional
      public void deleteProduct(int id){
    	  Session session =sessionFactory.getCurrentSession();
         Product p = (Product) session.get(Product.class, new Integer(id));

    	  session.delete(p);
      }


@Transactional
          public void editProduct(Product product) {
	 Session session =sessionFactory.getCurrentSession();
	 session.update(product);//update Product set productname=?,description=?,price=?.. where id=?
	
	
}




@Transactional
public List<Category> getAllCategories() {
	Session session=sessionFactory.getCurrentSession();
	Query query=session.createQuery("from Category");
	List<Category>categories=query.list();
	return categories;
}


@Transactional
public List<Product> list() {
	String hql ="from Product";
	Query query = sessionFactory.getCurrentSession().createQuery(hql);
return query.list();
}*/



}























//@Transactional
//public  Product updateProduct(Product product) {
	  // sessionFactory.getCurrentSession().update(product);
	    //return product;
	//}


//@Transactional
  //public void updateProduct(Product product){
	//productDao.editProduct(product);;  
//}






	
	
		
	
    
      
     
  


